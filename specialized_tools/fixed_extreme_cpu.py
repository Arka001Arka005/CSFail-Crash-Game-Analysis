"""
üî•üî•üî• FIXED EXTREME CPU DISCOVERY üî•üî•üî•
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø 100% –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–¶–ï–°–°–û–†–ê!

–§–ò–ö–°–´:
- –£–±—Ä–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–æ–±–ª–µ–º–∞ pickle)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã f-string –æ—à–∏–±–∫–∏
- –î–æ–±–∞–≤–ª–µ–Ω threading –¥–ª—è CPU stress
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ü–∏–∫–ª—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
"""

import pandas as pd
import numpy as np
import multiprocessing as mp
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import threading
import time
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from datetime import datetime
from tqdm import tqdm

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–¶–ï–°–°–û–í (–Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ!)
def cpu_stress_worker(data_chunk):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU"""
    try:
        chunk_id, df_chunk = data_chunk
        
        if df_chunk is None or len(df_chunk) == 0:
            return {}
        
        features = {}
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò CPU
        for col in df_chunk.select_dtypes(include=[np.number]).columns:
            data = df_chunk[col].fillna(0).values
            
            if len(data) < 2:
                continue
                
            # –ú–ù–û–ì–û –í–´–ß–ò–°–õ–ï–ù–ò–ô –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò CPU
            for lag in range(1, min(11, len(data))):
                lag_data = np.zeros_like(data)
                lag_data[lag:] = data[:-lag]
                features[f'{col}_lag_{lag}_chunk_{chunk_id}'] = lag_data
            
            # –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
            for i in range(5):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
                squared = data ** 2
                sqrt_abs = np.sqrt(np.abs(data))
                log_abs = np.log1p(np.abs(data))
                
                features[f'{col}_squared_{i}_chunk_{chunk_id}'] = squared
                features[f'{col}_sqrt_{i}_chunk_{chunk_id}'] = sqrt_abs
                features[f'{col}_log_{i}_chunk_{chunk_id}'] = log_abs
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                for j in range(3):
                    temp = data * (i + j + 1)
                    features[f'{col}_mult_{i}_{j}_chunk_{chunk_id}'] = temp
        
        return features
        
    except Exception as e:
        print(f"Worker error: {e}")
        return {}

def cpu_intensive_calculations(data_array, iterations=100):
    """CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
    results = []
    for i in range(iterations):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        temp1 = np.sin(data_array * i) 
        temp2 = np.cos(data_array * i)
        temp3 = np.exp(np.clip(data_array * 0.01, -10, 10))
        temp4 = np.sqrt(np.abs(data_array))
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = temp1 + temp2 + temp3 + temp4
        results.append(result.sum())
    
    return np.array(results)

class FixedExtremeCPU:
    def __init__(self, data_directory="."):
        """üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê CPU üî•"""
        self.data_directory = Path(data_directory)
        
        self.n_cores = mp.cpu_count()
        self.n_processes = self.n_cores * 2  # OVERSUBSCRIPTION
        self.n_threads = self.n_cores * 3    # –ü–û–¢–û–ö–ò
        
        print(f"üî• FIXED EXTREME CPU MODE:")
        print(f"  üíÄ –Ø–¥–µ—Ä: {self.n_cores}")
        print(f"  üíÄ –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {self.n_processes}")
        print(f"  üíÄ –ü–æ—Ç–æ–∫–æ–≤: {self.n_threads}")
        
    def threading_cpu_stress(self, data_array, duration=5):
        """Threading –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU"""
        results = []
        
        def worker_thread(thread_id):
            """–ü–æ—Ç–æ–∫ –¥–ª—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏"""
            local_data = data_array.copy()
            for i in range(1000):  # –ú–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                # CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                temp = np.sin(local_data * thread_id * i)
                temp = np.cos(temp)
                temp = np.sqrt(np.abs(temp))
                results.append(temp.mean())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–æ–≤
        threads = []
        for i in range(self.n_threads):
            thread = threading.Thread(target=worker_thread, args=(i,))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for thread in threads:
            thread.join()
        
        return np.array(results)
    
    def extreme_parallel_processing(self, df):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        print(f"\nüíÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–µ–ª–∫–∏–µ —á–∞–Ω–∫–∏
        chunk_size = max(5, len(df) // (self.n_processes * 2))
        chunks = []
        
        for i in range(0, len(df), chunk_size):
            chunk = df.iloc[i:i+chunk_size].copy()
            if len(chunk) > 0:
                chunks.append((i // chunk_size, chunk))
        
        print(f"üíÄ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú
        all_features = {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProcessPoolExecutor —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        with ProcessPoolExecutor(max_workers=self.n_processes) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            futures = [executor.submit(cpu_stress_worker, chunk) for chunk in chunks]
            
            for future in tqdm(as_completed(futures), total=len(futures), desc="üíÄ CPU Loading"):
                try:
                    result = future.result()
                    all_features.update(result)
                except Exception as e:
                    print(f"Process error: {e}")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø THREADING –ù–ê–ì–†–£–ó–ö–ê
        print("üíÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è threading –Ω–∞–≥—Ä—É–∑–∫–∞...")
        
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        for col in numeric_cols[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
            data = df[col].fillna(0).values
            if len(data) > 0:
                # Threading CPU stress
                thread_results = self.threading_cpu_stress(data)
                all_features[f'{col}_thread_stress'] = np.tile(thread_results[:len(data)], (len(data) // len(thread_results) + 1))[:len(data)]
        
        print(f"üíÄ –°–æ–∑–¥–∞–Ω–æ {len(all_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame 
        features_df = pd.DataFrame(index=df.index)
        max_len = len(df)
        
        for name, values in all_features.items():
            try:
                if isinstance(values, np.ndarray) and len(values) == max_len:
                    features_df[name] = values
                elif isinstance(values, (list, np.ndarray)) and len(values) > 0:
                    # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                    values_array = np.array(values)
                    if len(values_array) >= max_len:
                        features_df[name] = values_array[:max_len]
                    else:
                        # –î—É–±–ª–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                        repeated = np.tile(values_array, (max_len // len(values_array) + 1))
                        features_df[name] = repeated[:max_len]
            except Exception as e:
                print(f"Feature error {name}: {e}")
        
        return pd.concat([df, features_df], axis=1)
    
    def cpu_stress_selection(self, df, target_col):
        """CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        print(f"\nüíÄ CPU-–ò–ù–¢–ï–ù–°–ò–í–ù–´–ô –û–¢–ë–û–†...")
        
        if target_col not in df.columns:
            return df, []
        
        feature_cols = [col for col in df.columns if col != target_col]
        X = df[feature_cols].select_dtypes(include=[np.number]).fillna(0)
        y = df[target_col].fillna(0)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        mask = ~y.isnull()
        X = X[mask]
        y = y[mask]
        
        if len(X) < 50:
            return df, list(X.columns)
        
        print(f"üíÄ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –æ—Ç–±–æ—Ä –∏–∑ {len(X.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        selected_features = []
        
        # –ê–ì–†–ï–°–°–ò–í–ù–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò CPU
        for _ in range(5):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
            try:
                # SelectKBest —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
                for k in [30, 50, 70, 100]:
                    if k <= len(X.columns):
                        selector = SelectKBest(score_func=f_classif, k=k)
                        selector.fit(X, y)
                        selected = X.columns[selector.get_support()].tolist()
                        selected_features.extend(selected)
                
                # Random Forest —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                for n_est in [50, 100, 150]:
                    rf = RandomForestClassifier(n_estimators=n_est, n_jobs=self.n_cores, random_state=42)
                    rf.fit(X, y)
                    importance = pd.Series(rf.feature_importances_, index=X.columns)
                    top_features = importance.nlargest(50).index.tolist()
                    selected_features.extend(top_features)
                
            except Exception as e:
                print(f"Selection error: {e}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        final_features = list(set(selected_features))[:100]
        print(f"üíÄ –û—Ç–æ–±—Ä–∞–Ω–æ {len(final_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        
        return df, final_features
    
    def run_fixed_extreme_discovery(self):
        """üíÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö! üíÄ"""
        
        print("""
üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ
üíÄ FIXED EXTREME CPU DISCOVERY - 100% –ü–†–û–¶–ï–°–°–û–†!
üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ
üíÄ –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –û–®–ò–ë–ö–ò!
üíÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–¶–ï–°–°–û–†–ê!
============================================================
üíÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–ò–°–ö –ó–ê–ü–£–©–ï–ù!
============================================================
        """)
        
        start_time = time.time()
        
        # 1. –ù–∞—Ö–æ–¥–∏–º CSV
        csv_files = list(self.data_directory.glob("*.csv"))
        if not csv_files:
            print("üíÄ CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        main_df = None
        for csv_file in csv_files:
            try:
                df = pd.read_csv(csv_file)
                if 'hidden_state' in df.columns and len(df) > 1000:
                    main_df = df
                    print(f"üíÄ –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç: {csv_file.name}")
                    break
            except:
                continue
        
        if main_df is None:
            print("üíÄ –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        if len(main_df) > 15000:
            main_df = main_df.sample(n=15000, random_state=42)
        
        print(f"üíÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(main_df)} —Å—Ç—Ä–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏...")
        
        # 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
        processed_df = self.extreme_parallel_processing(main_df)
        
        # 4. CPU-–ò–ù–¢–ï–ù–°–ò–í–ù–´–ô –û–¢–ë–û–†
        processed_df, selected_features = self.cpu_stress_selection(processed_df, 'hidden_state')
        
        # 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø CPU –ù–ê–ì–†–£–ó–ö–ê - –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if len(selected_features) > 0:
            print(f"üíÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø CPU –ù–ê–ì–†–£–ó–ö–ê - –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            
            X = processed_df[selected_features].fillna(0)
            y = processed_df['hidden_state'].fillna(0)
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏
            best_auc = 0.0
            for i in range(3):  # 3 –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
                try:
                    if len(X) > 50:
                        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42+i)
                        
                        rf = RandomForestClassifier(
                            n_estimators=200,  # –ë–û–õ–¨–®–ï –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏
                            max_depth=15,
                            n_jobs=self.n_cores,  # –í–°–ï –Ø–î–†–ê
                            random_state=42+i
                        )
                        
                        rf.fit(X_train, y_train)
                        y_prob = rf.predict_proba(X_test)[:, 1] if len(np.unique(y_test)) > 1 else np.zeros(len(y_test))
                        
                        if len(np.unique(y_test)) > 1:
                            auc = roc_auc_score(y_test, y_prob)
                            best_auc = max(best_auc, auc)
                            print(f"üíÄ –ú–æ–¥–µ–ª—å {i+1}: AUC = {auc:.4f}")
                        
                except Exception as e:
                    print(f"Model error: {e}")
        else:
            best_auc = 0.0
        
        # 6. –°–û–•–†–ê–ù–ï–ù–ò–ï
        total_time = time.time() - start_time
        
        print(f"""
====================================================================
üíÄ FIXED EXTREME CPU DISCOVERY –ó–ê–í–ï–†–®–ï–ù! üíÄ
====================================================================
üíÄ –í–†–ï–ú–Ø: {total_time:.2f} —Å–µ–∫—É–Ω–¥
üíÄ –ü–†–û–¶–ï–°–°–û–†: –ó–ê–ì–†–£–ñ–ï–ù –ù–ê –ú–ê–ö–°–ò–ú–£–ú!  
üíÄ –ü–†–ò–ó–ù–ê–ö–û–í: {len(processed_df.columns)}
üíÄ –õ–£–ß–®–ò–•: {len(selected_features)}
üíÄ AUC: {best_auc:.4f}
====================================================================
üíÄ –í–°–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´! –ü–†–û–¶–ï–°–°–û–† –ù–ê 100%! üíÄ
====================================================================
        """)

if __name__ == "__main__":
    discovery = FixedExtremeCPU()
    discovery.run_fixed_extreme_discovery()
