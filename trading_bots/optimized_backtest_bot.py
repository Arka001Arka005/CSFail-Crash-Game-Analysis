"""
üîßüîßüîß OPTIMIZED BACKTEST BOT üîßüîßüîß  
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–õ–£–ß–®–ï–ù–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò!

–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú –ü–ï–†–í–û–ì–û –¢–ï–°–¢–ê:
- –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
- –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫
"""

import requests
import json
import pandas as pd
import numpy as np
import time
from datetime import datetime
import random
import warnings
warnings.filterwarnings('ignore')

class OptimizedBacktestBot:
    def __init__(self, token):
        """üîß –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –ë–û–¢"""
        
        self.token = token
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
            'Authorization': token
        }
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.start_round_id = 7026046
        
        # –î–∞–Ω–Ω—ã–µ
        self.historical_data = []
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.base_bet = 4.0  # –£–º–µ–Ω—å—à–∏–ª–∏ –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        self.balance = 1000.0
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ï –ø–æ—Ä–æ–≥–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        self.vol_high_threshold = 0.4    # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ HIGH (–±—ã–ª–æ 0.6)
        self.vol_low_threshold = 0.15    # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ LOW (–±—ã–ª–æ 0.3) 
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        self.high_vol_bet_mult = 0.8     # –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (–±—ã–ª–æ 0.7)
        self.high_vol_target_mult = 1.3  # –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ (–±—ã–ª–æ 1.4)
        self.low_vol_bet_mult = 1.2      # –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç (–±—ã–ª–æ 1.3)
        self.low_vol_target_mult = 0.95  # –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (–±—ã–ª–æ 0.9)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_profit = 0.0
        
        print("üîß OPTIMIZED BACKTEST BOT INITIALIZED")
        print("üí° –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ù–ê –û–°–ù–û–í–ï –ü–ï–†–í–û–ì–û –¢–ï–°–¢–ê!")
        print("üìä –¢–ï–°–¢–ò–†–£–ï–ú –†–ê–ó–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –ü–ï–†–ò–û–î–´!")
        print(f"üí∞ Starting balance: ${self.balance}")
    
    def fetch_historical_data(self, num_rounds=150):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {num_rounds} —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
        
        loaded_data = []
        
        for i in range(num_rounds):
            round_id = self.start_round_id - i
            
            if i % 25 == 0:
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{num_rounds} —Ä–∞—É–Ω–¥–æ–≤...")
            
            api_url = f"https://6cs.fail/api/crash/games/{round_id}"
            
            try:
                response = requests.get(api_url, headers=self.headers, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data and 'game' in data['data']:
                        game = data['data']['game']
                        
                        round_info = {
                            'round_id': game.get('id'),
                            'crashed_at': float(game.get('crashedAt', 0.0)),
                            'total_bank_usd': float(game.get('totalBankUsd', 0.0)),
                            'users_count': int(game.get('usersCount', 0)),
                            'start_at': game.get('startAt')
                        }
                        
                        loaded_data.append(round_info)
                
                time.sleep(random.uniform(0.08, 0.25))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞ {round_id}: {e}")
        
        self.historical_data = sorted(loaded_data, key=lambda x: x['round_id'])
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.historical_data)} —Ä–∞—É–Ω–¥–æ–≤")
        return len(self.historical_data) > 80
    
    def advanced_volatility_prediction(self, current_idx):
        """üîß –£–õ–£–ß–®–ï–ù–ù–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        
        if current_idx < 25:
            return "MEDIUM", 0.5, "insufficient_history"
        
        history = self.historical_data[:current_idx]
        crashes = [r['crashed_at'] for r in history[-40:]]  # –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–∏
        
        if len(crashes) < 15:
            return "MEDIUM", 0.5, "insufficient_data"
        
        # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = {}
        
        # –õ–∞–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–æ–ª—å—à–µ –ª–∞–≥–æ–≤)
        lags = [2, 3, 5, 7, 10]  # –î–æ–±–∞–≤–∏–ª–∏ –±–æ–ª—å—à–µ –ª–∞–≥–æ–≤
        for lag in lags:
            if len(crashes) > lag:
                features[f'crash_lag_{lag}'] = crashes[-lag-1]
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è rolling
        windows = [3, 5, 8, 12]  # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ–∫–Ω–∞
        for window in windows:
            if len(crashes) >= window + 2:
                shifted = crashes[:-2]
                if len(shifted) >= window:
                    features[f'vol_strict_{window}'] = np.std(shifted[-window:])
                    features[f'mean_strict_{window}'] = np.mean(shifted[-window:])
        
        # Expanding —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if len(crashes) >= 8:
            expanding_data = crashes[:-2]
            if len(expanding_data) > 3:
                features['expanding_vol'] = np.std(expanding_data)
                features['expanding_mean'] = np.mean(expanding_data)
                features['expanding_q75'] = np.percentile(expanding_data, 75)
                features['expanding_q25'] = np.percentile(expanding_data, 25)
        
        # üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø
        score = 0.0
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å vs —Å—Ä–µ–¥–Ω—è—è (–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ)
        for window in [3, 5, 8]:
            vol_key = f'vol_strict_{window}'
            if vol_key in features and 'expanding_vol' in features:
                if features[vol_key] > features['expanding_vol'] * 1.1:  # –°–Ω–∏–∑–∏–ª–∏ —Å 1.2
                    score += 0.15
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ª–∞–≥–∏ (–±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫)
        extreme_count = 0
        for lag in [2, 3, 5, 7]:
            lag_key = f'crash_lag_{lag}'
            if lag_key in features and 'expanding_mean' in features:
                ratio = features[lag_key] / (features['expanding_mean'] + 1e-8)
                if ratio > 1.7 or ratio < 0.45:  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏
                    extreme_count += 1
        
        if extreme_count >= 2:
            score += 0.2
        elif extreme_count >= 1:
            score += 0.1
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ö–≤–∞—Ä—Ç–∏–ª–∏ (–Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ)
        if 'crash_lag_2' in features and 'expanding_q75' in features and 'expanding_q25' in features:
            if features['crash_lag_2'] > features['expanding_q75']:
                score += 0.15
            elif features['crash_lag_2'] < features['expanding_q25']:
                score += 0.15
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –¢—Ä–µ–Ω–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)
        if len(crashes) >= 15:
            recent_vol = np.std(crashes[-5:])
            mid_vol = np.std(crashes[-10:-5])
            older_vol = np.std(crashes[-15:-10])
            
            # –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if recent_vol > mid_vol > older_vol:
                score += 0.2
            elif recent_vol > older_vol * 1.1:
                score += 0.1
        
        # –ü—Ä–∞–≤–∏–ª–æ 5: –ë–∞–Ω–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)
        if current_idx >= 8:
            recent_data = history[-8:]
            banks = [r['total_bank_usd'] for r in recent_data]
            users = [r['users_count'] for r in recent_data]
            
            if len(banks) > 3:
                bank_vol = np.std(banks) / (np.mean(banks) + 1e-8)
                user_vol = np.std(users) / (np.mean(users) + 1e-8)
                
                if bank_vol > 0.25:  # –°–Ω–∏–∑–∏–ª–∏ —Å 0.3
                    score += 0.1
                if user_vol > 0.2:
                    score += 0.1
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
        if score >= self.vol_high_threshold:
            return "HIGH", score, f"HIGH volatility predicted (score: {score:.3f})"
        elif score >= self.vol_low_threshold:
            return "MEDIUM", score, f"MEDIUM volatility predicted (score: {score:.3f})"
        else:
            return "LOW", score, f"LOW volatility predicted (score: {score:.3f})"
    
    def get_optimized_strategy(self, vol_level, vol_score):
        """üîß –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
        
        bet_size = self.base_bet
        target_mult = 1.5
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        if vol_level == "HIGH":
            bet_size *= self.high_vol_bet_mult
            target_mult *= self.high_vol_target_mult
            strategy = "HIGH_VOL_OPTIMIZED"
            
        elif vol_level == "LOW":
            bet_size *= self.low_vol_bet_mult
            target_mult *= self.low_vol_target_mult
            strategy = "LOW_VOL_OPTIMIZED"
            
        else:
            # MEDIUM —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
            if vol_score > 0.25:
                bet_size *= 1.05  # –°–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                target_mult *= 1.05
            strategy = "MEDIUM_VOL_OPTIMIZED"
        
        # –ê–î–ê–ü–¢–ò–í–ù–´–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        max_bet_percent = 0.12 if vol_level == "LOW" else 0.08
        bet_size = min(bet_size, self.balance * max_bet_percent)
        bet_size = max(bet_size, 1.0)
        target_mult = min(target_mult, 3.5)  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏
        target_mult = max(target_mult, 1.05)
        
        return {
            'bet_size': bet_size,
            'target_multiplier': target_mult,
            'strategy': strategy
        }
    
    def run_multiple_periods_test(self):
        """üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –†–ê–ó–ù–´–• –í–†–ï–ú–ï–ù–ù–´–• –ü–ï–†–ò–û–î–ê–•"""
        
        print(f"""
üîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîß
üîß OPTIMIZED BACKTEST BOT - –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï!
üîß –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ + –†–ê–ó–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –ü–ï–†–ò–û–î–´!
üîß –ù–ê–•–û–î–ò–ú –õ–£–ß–®–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ!
üîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîßüîß
        """)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
        if not self.fetch_historical_data(150):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê –†–ê–ó–ù–´–• –ü–ï–†–ò–û–î–ê–•
        test_periods = [
            {"start": 30, "trades": 30, "name": "PERIOD_1"},
            {"start": 50, "trades": 40, "name": "PERIOD_2"}, 
            {"start": 70, "trades": 35, "name": "PERIOD_3"},
            {"start": 90, "trades": 30, "name": "PERIOD_4"}
        ]
        
        all_results = []
        
        for period in test_periods:
            print(f"\n" + "üîß"*70)
            print(f"üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ò–û–î–ê: {period['name']}")
            print(f"üîß –†–∞—É–Ω–¥—ã: {period['start']} - {period['start'] + period['trades']}")
            print("üîß"*70)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.balance = 1000.0
            self.total_trades = 0
            self.winning_trades = 0
            self.total_profit = 0.0
            
            period_results = self.run_period_test(period['start'], period['trades'])
            period_results['period_name'] = period['name']
            all_results.append(period_results)
        
        # –ê–ù–ê–õ–ò–ó –í–°–ï–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        self.analyze_all_periods(all_results)
    
    def run_period_test(self, start_idx, num_trades):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        
        trade_results = []
        
        for i in range(num_trades):
            current_idx = start_idx + i
            
            if current_idx >= len(self.historical_data):
                break
            
            current_round = self.historical_data[current_idx]
            round_id = current_round['round_id']
            actual_crash = current_round['crashed_at']
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            vol_level, vol_score, vol_desc = self.advanced_volatility_prediction(current_idx)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = self.get_optimized_strategy(vol_level, vol_score)
            
            bet_size = strategy['bet_size']
            target_mult = strategy['target_multiplier']
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if actual_crash >= target_mult:
                profit = bet_size * (target_mult - 1)
                self.balance += profit
                self.total_profit += profit
                self.winning_trades += 1
                result = "WIN"
            else:
                self.balance -= bet_size
                self.total_profit -= bet_size
                result = "LOSS"
            
            self.total_trades += 1
            
            trade_results.append({
                'round_id': round_id,
                'vol_prediction': vol_level,
                'vol_score': vol_score,
                'bet_size': bet_size,
                'target_mult': target_mult,
                'actual_crash': actual_crash,
                'result': result,
                'profit': profit if result == "WIN" else -bet_size
            })
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        roi = (self.total_profit / 1000) * 100
        
        print(f"üìä –ü–ï–†–ò–û–î –ó–ê–í–ï–†–®–ï–ù:")
        print(f"üéØ Trades: {self.total_trades} | Wins: {self.winning_trades} | Win Rate: {win_rate:.1f}%")
        print(f"üí∞ P&L: ${self.total_profit:.2f} | ROI: {roi:.1f}%")
        
        return {
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'win_rate': win_rate,
            'total_profit': self.total_profit,
            'roi': roi,
            'final_balance': self.balance
        }
    
    def analyze_all_periods(self, all_results):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
        
        print(f"\n" + "üîß"*80)
        print("üîß –°–í–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ï–†–ò–û–î–û–í!")
        print("üîß"*80)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ü–ï–†–ò–û–î–ê–ú:")
        
        total_profit = 0
        profitable_periods = 0
        
        for result in all_results:
            period_name = result['period_name']
            profit = result['total_profit']
            roi = result['roi']
            win_rate = result['win_rate']
            
            total_profit += profit
            if profit > 0:
                profitable_periods += 1
            
            status = "‚úÖ –ü–†–ò–ë–´–õ–¨" if profit > 0 else "‚ùå –£–ë–´–¢–û–ö"
            print(f"üéØ {period_name}: {status} | P&L: ${profit:.2f} | ROI: {roi:.1f}% | WR: {win_rate:.1f}%")
        
        average_profit = total_profit / len(all_results)
        average_roi = (average_profit / 1000) * 100
        
        print(f"\nüí° –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        print(f"üìä –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {profitable_periods}/{len(all_results)}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥: ${average_profit:.2f}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π ROI: {average_roi:.1f}%")
        
        if profitable_periods >= len(all_results) / 2:
            print(f"\nüöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å!")
            print(f"üí∞ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω—å–≥–∞—Ö!")
        elif average_profit > -10:
            print(f"\nüìä –£–õ–£–ß–®–ï–ù–ò–ï –ó–ê–ú–ï–¢–ù–û!")
            print(f"üîß –ë–ª–∏–∑–∫–æ –∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ - –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞!")
        else:
            print(f"\n‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –í–°–ï –ï–©–ï –£–ë–´–¢–û–ß–ù–ê")
            print(f"ü§î –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞")

if __name__ == "__main__":
    TOKEN = "YOUR_TOKEN"
    
    bot = OptimizedBacktestBot(TOKEN)
    bot.run_multiple_periods_test()
