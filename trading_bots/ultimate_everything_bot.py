"""
üöÄüöÄüöÄ ULTIMATE EVERYTHING BOT üöÄüöÄüöÄ  
–§–ò–ù–ê–õ–¨–ù–´–ô –°–£–ü–ï–†-–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ –°–û –í–°–ï–ú–ò –ù–ê–ô–î–ï–ù–ù–´–ú–ò –¢–ï–•–ù–ò–ö–ê–ú–ò!

Matrix Profile + Transformers + Fourier + Ensemble + Provably Fair Analysis
"""

import requests
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
import time
import random
import warnings
from scipy import signal
import hashlib
import hmac
warnings.filterwarnings('ignore')

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import stumpy
    HAS_STUMPY = True
except ImportError:
    HAS_STUMPY = False
    print("‚ö†Ô∏è STUMPY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Matrix Profile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    import xgboost as xgb
    import lightgbm as lgb
    HAS_BOOSTING = True
except ImportError:
    HAS_BOOSTING = False
    print("‚ö†Ô∏è XGBoost/LightGBM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

class UltimateEverythingBot:
    def __init__(self, token):
        """üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –°–£–ü–ï–†-–ë–û–¢ –°–û –í–°–ï–ú–ò –¢–ï–•–ù–ò–ö–ê–ú–ò"""
        
        self.token = token
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Authorization': token
        }
        
        self.start_round_id = 7026046
        self.historical_data = []
        
        # –°—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π
        self.models = {}
        self.scaler = StandardScaler()
        self.is_trained = False
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.balance = 1000.0
        self.base_bet = 5.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_profit = 0.0
        
        print("üöÄ ULTIMATE EVERYTHING BOT INITIALIZED")
        print("üß† –í–°–ï –¢–ï–•–ù–ò–ö–ò –ò–ó OPEN SOURCE –ü–†–û–ï–ö–¢–û–í!")
    
    def fetch_data(self, num_rounds=200):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞"""
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {num_rounds} —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞...")
        
        loaded_data = []
        for i in range(num_rounds):
            round_id = self.start_round_id - i
            
            if i % 50 == 0:
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{num_rounds} —Ä–∞—É–Ω–¥–æ–≤...")
            
            try:
                response = requests.get(f"https://6cs.fail/api/crash/games/{round_id}", 
                                      headers=self.headers, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data and 'game' in data['data']:
                        game = data['data']['game']
                        
                        round_info = {
                            'round_id': game.get('id'),
                            'crashed_at': float(game.get('crashedAt', 0.0)),
                            'total_bank_usd': float(game.get('totalBankUsd', 0.0)),
                            'users_count': int(game.get('usersCount', 0)),
                            'server_seed': game.get('serverSeed', ''),
                            'nonce': i
                        }
                        loaded_data.append(round_info)
                
                time.sleep(random.uniform(0.05, 0.15))
                
            except Exception as e:
                continue
        
        self.historical_data = sorted(loaded_data, key=lambda x: x['round_id'])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.historical_data)} —Ä–∞—É–Ω–¥–æ–≤")
        return len(self.historical_data) > 100
    
    def matrix_profile_analysis(self, crashes, window_size=10):
        """üîç Matrix Profile –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (STUMPY)"""
        if not HAS_STUMPY or len(crashes) < 50:
            return []
        
        try:
            # Matrix Profile –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Ç–∏–≤–æ–≤
            mp = stumpy.stump(crashes, m=window_size)
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –∞–Ω–æ–º–∞–ª–∏–π –∏ –º–æ—Ç–∏–≤—ã
            anomaly_idx = np.argsort(mp[:, 0])[-5:]  # –¢–æ–ø 5 –∞–Ω–æ–º–∞–ª–∏–π
            motif_idx = np.argsort(mp[:, 0])[:5]     # –¢–æ–ø 5 –º–æ—Ç–∏–≤–æ–≤
            
            features = []
            features.extend(mp[-10:, 0])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 MP distances
            features.append(len(anomaly_idx))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π
            features.append(len(motif_idx))    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ—Ç–∏–≤–æ–≤
            
            return features
        except:
            return []
    
    def fourier_analysis(self, crashes):
        """üìä Fourier –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        if len(crashes) < 32:
            return []
        
        try:
            # FFT –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —á–∞—Å—Ç–æ—Ç
            fft = np.fft.fft(crashes)
            freqs = np.fft.fftfreq(len(crashes))
            
            # Power spectral density
            psd = np.abs(fft) ** 2
            
            # –¢–æ–ø —á–∞—Å—Ç–æ—Ç—ã
            top_freqs_idx = np.argsort(psd)[-5:]
            top_freqs = freqs[top_freqs_idx]
            top_powers = psd[top_freqs_idx]
            
            features = []
            features.extend(top_powers)  # –ú–æ—â–Ω–æ—Å—Ç–∏ —Ç–æ–ø —á–∞—Å—Ç–æ—Ç
            features.extend(top_freqs)   # –°–∞–º–∏ —á–∞—Å—Ç–æ—Ç—ã
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
            normalized_psd = psd / np.sum(psd)
            spectral_entropy = -np.sum(normalized_psd * np.log2(normalized_psd + 1e-12))
            features.append(spectral_entropy)
            
            return features
        except:
            return []
    
    def provably_fair_features(self, current_idx):
        """üîê –ü—Ä–æ–≤ably Fair –∞–Ω–∞–ª–∏–∑ (–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)"""
        if current_idx < 10:
            return []
        
        try:
            current_round = self.historical_data[current_idx]
            
            # –ê–Ω–∞–ª–∏–∑ server seed –∏ nonce patterns
            server_seed = current_round.get('server_seed', '')
            nonce = current_round.get('nonce', 0)
            
            features = []
            
            # Hash-based features
            if server_seed:
                seed_hash = hashlib.sha256(server_seed.encode()).hexdigest()
                # –ë–µ—Ä–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ö—ç—à–∞
                features.append(int(seed_hash[:8], 16) % 1000)  # –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã
                features.append(int(seed_hash[-8:], 16) % 1000) # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–π—Ç—ã
            else:
                features.extend([0, 0])
            
            # Nonce patterns
            features.append(nonce % 10)      # Nonce mod 10
            features.append(nonce % 100)     # Nonce mod 100
            
            # Nonce trend –≤ –æ–∫–Ω–µ
            recent_nonces = [self.historical_data[i].get('nonce', 0) for i in range(max(0, current_idx-10), current_idx)]
            if recent_nonces:
                features.append(np.mean(recent_nonces))
                features.append(np.std(recent_nonces))
            else:
                features.extend([0, 0])
            
            return features
        except:
            return []
    
    def create_ultimate_features(self, current_idx):
        """üöÄ –°–û–ó–î–ê–ù–ò–ï –°–£–ü–ï–†-–ü–†–ò–ó–ù–ê–ö–û–í —Å–æ –≤—Å–µ–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏"""
        if current_idx < 50:
            return None
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        crashes = [self.historical_data[i]['crashed_at'] for i in range(max(0, current_idx-100), current_idx)]
        banks = [self.historical_data[i]['total_bank_usd'] for i in range(max(0, current_idx-20), current_idx)]
        users = [self.historical_data[i]['users_count'] for i in range(max(0, current_idx-20), current_idx)]
        
        all_features = []
        
        # 1. –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        for window in [5, 10, 20, 50]:
            if len(crashes) >= window:
                window_crashes = crashes[-window:]
                all_features.extend([
                    np.mean(window_crashes), np.std(window_crashes),
                    np.min(window_crashes), np.max(window_crashes),
                    np.percentile(window_crashes, 25), np.percentile(window_crashes, 75)
                ])
        
        # 2. Matrix Profile –∞–Ω–∞–ª–∏–∑ üÜï
        mp_features = self.matrix_profile_analysis(crashes)
        all_features.extend(mp_features)
        
        # 3. Fourier –∞–Ω–∞–ª–∏–∑ üÜï  
        fourier_features = self.fourier_analysis(crashes)
        all_features.extend(fourier_features)
        
        # 4. Provably Fair features üÜï
        pf_features = self.provably_fair_features(current_idx)
        all_features.extend(pf_features)
        
        # 5. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∞–≥–∏ –∏ —Ç—Ä–µ–Ω–¥—ã
        for lag in [1, 2, 3, 5, 10, 20]:
            if len(crashes) > lag:
                all_features.append(crashes[-1] - crashes[-1-lag])
        
        # 6. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if banks and users:
            all_features.extend([
                np.mean(banks), np.std(banks),
                np.mean(users), np.std(users)
            ])
        
        # 7. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(crashes) >= 10:
            recent_10 = crashes[-10:]
            all_features.extend([
                len([x for x in recent_10 if x > 3.0]),    # –í—ã—Å–æ–∫–∏–µ –∫—Ä–∞—à–∏
                len([x for x in recent_10 if x < 1.3]),    # –ù–∏–∑–∫–∏–µ –∫—Ä–∞—à–∏
                len([x for x in recent_10 if 1.3 <= x <= 3.0])  # –°—Ä–µ–¥–Ω–∏–µ
            ])
        
        return all_features if len(all_features) > 0 else None
    
    def train_ultimate_ensemble(self):
        """üß† –û–±—É—á–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—è –í–°–ï–• –º–æ–¥–µ–ª–µ–π"""
        print("üß† –û–±—É—á–∞–µ–º —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        
        if len(self.historical_data) < 100:
            return False
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        features = []
        targets = []
        
        for i in range(70, len(self.historical_data) - 10):
            feature_vec = self.create_ultimate_features(i)
            if feature_vec is None:
                continue
            
            # –¶–µ–ª—å - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö 5 —Ä–∞—É–Ω–¥–æ–≤
            future_crashes = [self.historical_data[j]['crashed_at'] for j in range(i, min(i+5, len(self.historical_data)))]
            future_vol = np.std(future_crashes) if len(future_crashes) > 1 else 0
            
            features.append(feature_vec)
            targets.append(future_vol)
        
        if len(features) < 50:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return False
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ (padding)
        max_len = max(len(f) for f in features)
        features_padded = []
        for f in features:
            if len(f) < max_len:
                f_padded = f + [0] * (max_len - len(f))
            else:
                f_padded = f[:max_len]
            features_padded.append(f_padded)
        
        X = np.array(features_padded)
        y = np.array(targets)
        
        print(f"üìä –°—É–ø–µ—Ä-–¥–∞—Ç–∞—Å–µ—Ç: {X.shape[0]} –ø—Ä–∏–º–µ—Ä–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        X_scaled = self.scaler.fit_transform(X)
        
        # –û–±—É—á–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—è
        self.models['rf'] = RandomForestRegressor(n_estimators=200, random_state=42)
        self.models['gb'] = GradientBoostingRegressor(n_estimators=100, random_state=42)
        
        if HAS_BOOSTING:
            self.models['xgb'] = xgb.XGBRegressor(n_estimators=100, random_state=42)
            self.models['lgb'] = lgb.LGBMRegressor(n_estimators=100, random_state=42)
        
        for name, model in self.models.items():
            try:
                model.fit(X_scaled, y)
                print(f"‚úÖ –°—É–ø–µ—Ä-–º–æ–¥–µ–ª—å {name} –æ–±—É—á–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {name}: {e}")
        
        self.is_trained = True
        print("üöÄ –°—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å –≥–æ—Ç–æ–≤!")
        return True
    
    def predict_ultimate_volatility(self, current_idx):
        """üéØ –°—É–ø–µ—Ä-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫"""
        if not self.is_trained:
            return 0.5, 0.5
        
        feature_vec = self.create_ultimate_features(current_idx)
        if feature_vec is None:
            return 0.5, 0.5
        
        # Padding –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        expected_len = self.scaler.n_features_in_
        if len(feature_vec) < expected_len:
            feature_vec = feature_vec + [0] * (expected_len - len(feature_vec))
        elif len(feature_vec) > expected_len:
            feature_vec = feature_vec[:expected_len]
        
        X_scaled = self.scaler.transform([feature_vec])
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—è
        predictions = []
        for name, model in self.models.items():
            try:
                pred = model.predict(X_scaled)[0]
                predictions.append(pred)
            except:
                continue
        
        if not predictions:
            return 0.5, 0.5
        
        # –°—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        ensemble_pred = np.mean(predictions)
        confidence = 1.0 / (1.0 + np.std(predictions)) if len(predictions) > 1 else 0.5
        
        return ensemble_pred, confidence
    
    def get_ultimate_strategy(self, current_idx, predicted_vol, confidence):
        """üéØ –°—É–ø–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫"""
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        all_preds = []
        for i in range(max(70, current_idx-50), current_idx, 5):
            pred, _ = self.predict_ultimate_volatility(i)
            all_preds.append(pred)
        
        if all_preds:
            vol_q75 = np.percentile(all_preds, 75)
            vol_q25 = np.percentile(all_preds, 25)
        else:
            vol_q75, vol_q25 = 0.6, 0.4
        
        # –°—É–ø–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        if predicted_vol > vol_q75 and confidence > 0.8:
            target_mult = 1.9 + min(confidence, 0.5)
            strategy = "ULTIMATE_HIGH_VOL"
        elif predicted_vol < vol_q25 and confidence > 0.7:
            target_mult = 1.5 + (confidence * 0.4)
            strategy = "ULTIMATE_LOW_VOL"  
        elif confidence > 0.9:
            target_mult = 1.7 + (predicted_vol * 0.6)
            strategy = "ULTIMATE_HIGH_CONF"
        else:
            target_mult = 1.6
            strategy = "ULTIMATE_CONSERVATIVE"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        target_mult = min(target_mult, 3.0)
        target_mult = max(target_mult, 1.4)
        
        return {
            'bet_size': self.base_bet,
            'target_multiplier': target_mult,
            'strategy': strategy,
            'predicted_vol': predicted_vol,
            'confidence': confidence
        }
    
    def run_ultimate_test(self, start_idx=100, num_trades=80):
        """üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –°–£–ü–ï–†-–¢–ï–°–¢ –°–û –í–°–ï–ú–ò –¢–ï–•–ù–ò–ö–ê–ú–ò"""
        
        print(f"""
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
üöÄ ULTIMATE EVERYTHING BOT - –í–°–ï –¢–ï–•–ù–ò–ö–ò –ò–ó OPEN SOURCE!
üöÄ Matrix Profile + Transformers + Fourier + Provably Fair!
üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –°–û –í–°–ï–ú–ò –ù–ê–ô–î–ï–ù–ù–´–ú–ò –ú–ï–¢–û–î–ê–ú–ò!
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
        """)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.fetch_data(200):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±—É—á–∞–µ–º —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å
        if not self.train_ultimate_ensemble():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å —Å—É–ø–µ—Ä-–∞–Ω—Å–∞–º–±–ª—å")
            return
        
        print(f"üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—É–ø–µ—Ä-—Ç–µ—Å—Ç —Å {num_trades} —Å–¥–µ–ª–æ–∫")
        
        results = []
        
        for i in range(num_trades):
            current_idx = start_idx + i
            
            if current_idx >= len(self.historical_data):
                break
            
            current_round = self.historical_data[current_idx]
            actual_crash = current_round['crashed_at']
            
            # –°—É–ø–µ—Ä-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            predicted_vol, confidence = self.predict_ultimate_volatility(current_idx)
            
            # –°—É–ø–µ—Ä-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            strategy = self.get_ultimate_strategy(current_idx, predicted_vol, confidence)
            
            bet_size = strategy['bet_size']
            target_mult = strategy['target_multiplier']
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if actual_crash >= target_mult:
                profit = bet_size * (target_mult - 1)
                self.balance += profit
                self.total_profit += profit
                self.winning_trades += 1
                result = "WIN"
            else:
                self.balance -= bet_size
                self.total_profit -= bet_size
                result = "LOSS"
                profit = -bet_size
            
            self.total_trades += 1
            
            results.append({
                'round_id': current_round['round_id'],
                'predicted_vol': predicted_vol,
                'confidence': confidence,
                'actual_crash': actual_crash,
                'target_mult': target_mult,
                'result': result,
                'profit': profit,
                'strategy': strategy['strategy']
            })
            
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (i + 1) % 20 == 0:
                win_rate = (self.winning_trades / self.total_trades * 100)
                roi = ((self.balance - 1000) / 1000) * 100
                print(f"üöÄ {i+1} —Å–¥–µ–ª–æ–∫: WR={win_rate:.1f}%, P&L=${self.total_profit:.2f}, ROI={roi:.1f}%")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.print_ultimate_results(results)
    
    def print_ultimate_results(self, results):
        """üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—É–ø–µ—Ä-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        roi = ((self.balance - 1000) / 1000) * 100
        
        print(f"""
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
üöÄ ULTIMATE EVERYTHING RESULTS - –§–ò–ù–ê–õ–¨–ù–´–ô –°–£–ü–ï–†-–¢–ï–°–¢!
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
        """)
        
        print(f"üéØ Total Trades: {self.total_trades}")
        print(f"‚úÖ Wins: {self.winning_trades}")
        print(f"üìà Win Rate: {win_rate:.1f}%")
        print(f"üí∞ Final Balance: ${self.balance:.2f}")
        print(f"üìä Total P&L: ${self.total_profit:.2f}")
        print(f"üìà ROI: {roi:.1f}%")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
        print(f"ü•á Ultra ML: ROI -3.1%, WR 57.5%")
        print(f"ü•à –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ROI -2.4%, WR 47%")
        print(f"ü•â –ë–∞–∑–æ–≤—ã–π: ROI -6.2%, WR 42.5%")
        print(f"üèÜ ULTIMATE: ROI {roi:.1f}%, WR {win_rate:.1f}%")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        print(f"\nüí° ULTIMATE CONCLUSION:")
        if roi > 3:
            print("üöÄüöÄüöÄ –ù–ï–í–ï–†–û–Ø–¢–ù–û! –í–°–ï –¢–ï–•–ù–ò–ö–ò –í–ú–ï–°–¢–ï –°–†–ê–ë–û–¢–ê–õ–ò!")
            print("üéØ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤!")
            print("‚úÖ –ì–û–¢–û–í–û –ö –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ï!")
        elif roi > 0:
            print("üéâ –ü–†–û–†–´–í! –ü–ï–†–í–´–ô –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô ROI!")
            print("üöÄ –°—É–ø–µ—Ä-—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–∫–∞–∑–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        elif roi > -1:
            print("üìà –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê –í–°–ï –í–†–ï–ú–Ø!")
            print("üîß –ë–ª–∏–∑–∫–æ –∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å —Å—É–ø–µ—Ä-—Ç–µ—Ö–Ω–∏–∫–∞–º–∏!")
        else:
            print("‚ùå –î–∞–∂–µ –≤—Å–µ —Å—É–ø–µ—Ä-—Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏")
            print("üé≤ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–∞")
            print("üí° –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")

if __name__ == "__main__":
    TOKEN = "YOUR_TOKEN"
    
    bot = UltimateEverythingBot(TOKEN)
    bot.run_ultimate_test(start_idx=100, num_trades=60)
