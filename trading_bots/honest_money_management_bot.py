"""
üí∞üí∞üí∞ HONEST MONEY MANAGEMENT BOT üí∞üí∞üí∞  
–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ù–ï –ü–†–ï–î–°–ö–ê–ó–´–í–ê–ï–ú, –ê –£–ü–†–ê–í–õ–Ø–ï–ú –†–ò–°–ö–ê–ú–ò!

- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á—Ç–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞
- –§–æ–∫—É—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–∞–≤–æ–∫ –∏ —Ä–∏—Å–∫–∞–º–∏
- –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–∏–º –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º —É—Å–ª–æ–≤–∏—è–º
- –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–æ–≥–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
- –ß–µ—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
"""

import requests
import pandas as pd
import numpy as np
import time
import random
import warnings
warnings.filterwarnings('ignore')

class HonestMoneyManagementBot:
    def __init__(self, token):
        """üí∞ –ß–ï–°–¢–ù–´–ô –ú–ê–ù–ò-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ –ë–û–¢"""
        
        self.token = token
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Authorization': token
        }
        
        self.start_round_id = 7026046
        self.historical_data = []
        
        # –ß–ï–°–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ - –ù–ï –û–°–ù–û–í–ê–ù–ù–´–ï –ù–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø–•
        self.initial_balance = 1000.0
        self.balance = 1000.0
        self.base_bet_percentage = 0.02  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        self.max_bet_percentage = 0.05   # –ú–∞–∫—Å–∏–º—É–º 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        self.min_bet = 2.0
        self.max_bet = 20.0
        
        # –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –¶–ï–õ–ò
        self.conservative_targets = [1.5, 1.6, 1.7, 1.8, 1.9, 2.0]
        self.current_target_idx = 0
        
        # –ê–î–ê–ü–¢–ò–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò
        self.recent_results = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.consecutive_losses = 0
        self.consecutive_wins = 0
        
        # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        self.total_trades = 0
        self.winning_trades = 0
        self.total_profit = 0.0
        self.max_drawdown = 0.0
        self.peak_balance = 1000.0
        
        print("üí∞ HONEST MONEY MANAGEMENT BOT INITIALIZED")
        print("üéØ –§–û–ö–£–° –ù–ê –£–ü–†–ê–í–õ–ï–ù–ò–ò –†–ò–°–ö–ê–ú–ò, –ê –ù–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø–•!")
    
    def fetch_data_for_adaptation(self, num_rounds=100):
        """üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ç–µ–∫—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º"""
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {num_rounds} —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...")
        
        loaded_data = []
        for i in range(num_rounds):
            round_id = self.start_round_id - i
            
            if i % 25 == 0:
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{num_rounds} —Ä–∞—É–Ω–¥–æ–≤...")
            
            try:
                response = requests.get(f"https://6cs.fail/api/crash/games/{round_id}", 
                                      headers=self.headers, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data and 'game' in data['data']:
                        game = data['data']['game']
                        
                        round_info = {
                            'round_id': game.get('id'),
                            'crashed_at': float(game.get('crashedAt', 0.0)),
                            'total_bank_usd': float(game.get('totalBankUsd', 0.0)),
                            'users_count': int(game.get('usersCount', 0))
                        }
                        loaded_data.append(round_info)
                
                time.sleep(random.uniform(0.05, 0.15))
                
            except Exception as e:
                continue
        
        self.historical_data = sorted(loaded_data, key=lambda x: x['round_id'])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.historical_data)} —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
        return len(self.historical_data) > 50
    
    def observe_current_conditions(self, current_idx):
        """üëÅÔ∏è –ù–ê–ë–õ–Æ–î–ê–ï–ú —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è (–ù–ï –ü–†–ï–î–°–ö–ê–ó–´–í–ê–ï–ú!)"""
        if current_idx < 20:
            return {
                'recent_volatility': 'unknown',
                'activity_level': 'unknown',
                'trend': 'unknown'
            }
        
        # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ü–†–û–®–õ–´–ï –¥–∞–Ω–Ω—ã–µ
        recent_crashes = [self.historical_data[i]['crashed_at'] for i in range(current_idx-20, current_idx)]
        recent_banks = [self.historical_data[i]['total_bank_usd'] for i in range(current_idx-10, current_idx)]
        recent_users = [self.historical_data[i]['users_count'] for i in range(current_idx-10, current_idx)]
        
        # –ù–ê–ë–õ–Æ–î–ê–ï–ú–ê–Ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–æ—à–ª–∞—è)
        observed_volatility = np.std(recent_crashes)
        volatility_level = 'low' if observed_volatility < 0.8 else 'medium' if observed_volatility < 1.2 else 'high'
        
        # –ù–ê–ë–õ–Æ–î–ê–ï–ú–ê–Ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        avg_bank = np.mean(recent_banks)
        avg_users = np.mean(recent_users)
        activity_level = 'low' if avg_users < 50 else 'medium' if avg_users < 100 else 'high'
        
        # –ù–ê–ë–õ–Æ–î–ê–ï–ú–´–ô —Ç—Ä–µ–Ω–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—Ä–∞—à–µ–π
        if len(recent_crashes) >= 5:
            recent_5 = recent_crashes[-5:]
            high_crashes = len([x for x in recent_5 if x > 2.0])
            low_crashes = len([x for x in recent_5 if x < 1.5])
            
            if high_crashes >= 3:
                trend = 'high_crashes'
            elif low_crashes >= 3:
                trend = 'low_crashes'
            else:
                trend = 'mixed'
        else:
            trend = 'unknown'
        
        return {
            'recent_volatility': volatility_level,
            'activity_level': activity_level,
            'trend': trend,
            'observed_vol_value': observed_volatility
        }
    
    def get_risk_adjusted_bet_size(self):
        """üí∞ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        base_bet = self.balance * self.base_bet_percentage
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self.consecutive_losses >= 3:
            # –ü–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É
            risk_multiplier = 0.5
        elif self.consecutive_losses >= 2:
            risk_multiplier = 0.75
        elif self.consecutive_wins >= 3:
            # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥
            risk_multiplier = 1.25
        else:
            risk_multiplier = 1.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä–∞–≤–¥–∞—É–Ω–∞
        current_drawdown = (self.peak_balance - self.balance) / self.peak_balance
        if current_drawdown > 0.15:  # –ë–æ–ª—å—à–æ–π –¥—Ä–∞–≤–¥–∞—É–Ω
            risk_multiplier *= 0.6
        elif current_drawdown > 0.10:
            risk_multiplier *= 0.8
        
        adjusted_bet = base_bet * risk_multiplier
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        adjusted_bet = max(adjusted_bet, self.min_bet)
        adjusted_bet = min(adjusted_bet, self.max_bet)
        adjusted_bet = min(adjusted_bet, self.balance * self.max_bet_percentage)
        
        return round(adjusted_bet, 2)
    
    def get_adaptive_target(self, conditions):
        """üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å
        base_targets = [1.5, 1.6, 1.7, 1.8]
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ù–ê–ë–õ–Æ–î–ê–ï–ú–´–• —É—Å–ª–æ–≤–∏–π
        if conditions['recent_volatility'] == 'high':
            # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
            target = random.choice([1.4, 1.5, 1.6])
        elif conditions['recent_volatility'] == 'low':
            # –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - —á—É—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ
            target = random.choice([1.6, 1.7, 1.8, 1.9])
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏
            target = random.choice(base_targets)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self.consecutive_losses >= 2:
            # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä—å
            target = min(target, 1.6)
        elif len(self.recent_results) >= 10:
            recent_win_rate = sum(self.recent_results[-10:]) / 10
            if recent_win_rate < 0.4:  # –ü–ª–æ—Ö–∞—è —Å–µ—Ä–∏—è
                target = min(target, 1.5)
        
        return target
    
    def update_statistics(self, won, bet_size, profit):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        self.total_trades += 1
        if won:
            self.winning_trades += 1
            self.consecutive_wins += 1
            self.consecutive_losses = 0
        else:
            self.consecutive_wins = 0
            self.consecutive_losses += 1
        
        self.total_profit += profit
        self.balance += profit
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∏–∫–∞ –∏ –¥—Ä–∞–≤–¥–∞—É–Ω–∞
        if self.balance > self.peak_balance:
            self.peak_balance = self.balance
        
        current_drawdown = self.peak_balance - self.balance
        if current_drawdown > self.max_drawdown:
            self.max_drawdown = current_drawdown
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.recent_results.append(1 if won else 0)
        if len(self.recent_results) > 20:
            self.recent_results.pop(0)
    
    def run_honest_test(self, start_idx=50, num_trades=80):
        """üí∞ –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ –ú–ê–ù–ò-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê"""
        
        print(f"""
üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞
üí∞ HONEST MONEY MANAGEMENT BOT - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢!
üí∞ –ù–ï –ü–†–ï–î–°–ö–ê–ó–´–í–ê–ï–ú - –£–ü–†–ê–í–õ–Ø–ï–ú –†–ò–°–ö–ê–ú–ò!
üí∞ –ê–î–ê–ü–¢–ò–†–£–ï–ú–°–Ø –ö –ù–ê–ë–õ–Æ–î–ê–ï–ú–´–ú –£–°–õ–û–í–ò–Ø–ú!
üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞
        """)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if not self.fetch_data_for_adaptation(100):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
            return
        
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å {num_trades} —Å–¥–µ–ª–æ–∫")
        print(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance}")
        print(f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: 2-5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞")
        print(f"üéØ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏: 1.4-1.9x")
        
        results = []
        
        for i in range(num_trades):
            current_idx = start_idx + i
            
            if current_idx >= len(self.historical_data):
                break
            
            current_round = self.historical_data[current_idx]
            actual_crash = current_round['crashed_at']
            
            # –ù–ê–ë–õ–Æ–î–ê–ï–ú —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è (–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º!)
            conditions = self.observe_current_conditions(current_idx)
            
            # –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
            bet_size = self.get_risk_adjusted_bet_size()
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
            target_mult = self.get_adaptive_target(conditions)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if actual_crash >= target_mult:
                profit = bet_size * (target_mult - 1)
                won = True
                result = "WIN"
            else:
                profit = -bet_size
                won = False
                result = "LOSS"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics(won, bet_size, profit)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results.append({
                'round_id': current_round['round_id'],
                'conditions': conditions,
                'actual_crash': actual_crash,
                'bet_size': bet_size,
                'target_mult': target_mult,
                'result': result,
                'profit': profit,
                'balance': self.balance,
                'consecutive_losses': self.consecutive_losses
            })
            
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (i + 1) % 20 == 0:
                win_rate = (self.winning_trades / self.total_trades * 100)
                roi = ((self.balance - self.initial_balance) / self.initial_balance) * 100
                drawdown_pct = (self.max_drawdown / self.peak_balance) * 100
                print(f"üìä {i+1} —Å–¥–µ–ª–æ–∫: WR={win_rate:.1f}%, Balance=${self.balance:.2f}, ROI={roi:.1f}%, DD={drawdown_pct:.1f}%")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.print_honest_results(results)
    
    def print_honest_results(self, results):
        """üí∞ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Å—Ç–Ω–æ–≥–æ –º–∞–Ω–∏-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        
        win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        roi = ((self.balance - self.initial_balance) / self.initial_balance) * 100
        drawdown_pct = (self.max_drawdown / self.peak_balance) * 100
        
        print(f"""
üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞
üí∞ HONEST MONEY MANAGEMENT RESULTS - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢!
üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞
        """)
        
        print(f"üéØ Total Trades: {self.total_trades}")
        print(f"‚úÖ Wins: {self.winning_trades}")
        print(f"üìà Win Rate: {win_rate:.1f}%")
        print(f"üí∞ Start Balance: ${self.initial_balance:.2f}")
        print(f"üí∞ Final Balance: ${self.balance:.2f}")
        print(f"üìä Total P&L: ${self.total_profit:.2f}")
        print(f"üìà ROI: {roi:.1f}%")
        print(f"üìâ Max Drawdown: ${self.max_drawdown:.2f} ({drawdown_pct:.1f}%)")
        print(f"üèîÔ∏è Peak Balance: ${self.peak_balance:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Å–ª–æ–≤–∏—è–º
        conditions_stats = {}
        for r in results:
            vol = r['conditions']['recent_volatility']
            if vol not in conditions_stats:
                conditions_stats[vol] = {'wins': 0, 'total': 0, 'profit': 0}
            
            conditions_stats[vol]['total'] += 1
            conditions_stats[vol]['profit'] += r['profit']
            if r['result'] == 'WIN':
                conditions_stats[vol]['wins'] += 1
        
        print(f"\nüìä BREAKDOWN BY OBSERVED CONDITIONS:")
        for condition, stats in conditions_stats.items():
            wr = (stats['wins'] / stats['total'] * 100) if stats['total'] > 0 else 0
            print(f"üëÅÔ∏è {condition.upper()}_VOLATILITY: {stats['wins']}/{stats['total']} ({wr:.1f}%) | P&L: ${stats['profit']:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        avg_bet = np.mean([r['bet_size'] for r in results])
        bet_range = (min([r['bet_size'] for r in results]), max([r['bet_size'] for r in results]))
        avg_target = np.mean([r['target_mult'] for r in results])
        
        print(f"\nüí∞ RISK MANAGEMENT ANALYSIS:")
        print(f"üíµ Average Bet Size: ${avg_bet:.2f}")
        print(f"üìä Bet Size Range: ${bet_range[0]:.2f} - ${bet_range[1]:.2f}")
        print(f"üéØ Average Target: {avg_target:.2f}x")
        print(f"‚öñÔ∏è Risk per Trade: {(avg_bet/self.initial_balance)*100:.1f}% of initial capital")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        print(f"\nüí° HONEST MONEY MANAGEMENT CONCLUSION:")
        if roi > 5:
            print("üöÄ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ß–µ—Å—Ç–Ω—ã–π –º–∞–Ω–∏-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üí∞ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏!")
        elif roi > 0:
            print("‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô ROI! –ú–∞–Ω–∏-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω!")
            print("üìä –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–µ!")
        elif roi > -5:
            print("‚öñÔ∏è –ë–õ–ò–ó–ö–û –ö –ë–ï–ó–£–ë–´–¢–û–ß–ù–û–°–¢–ò!")
            print("üí∞ –•–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏!")
        else:
            print("üìâ –î–∞–∂–µ –º–∞–Ω–∏-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –Ω–µ —Å–ø–∞—Å–∞–µ—Ç")
            print("ü§î –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã –µ—â–µ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏")
        
        print(f"\nüéØ –ö–õ–Æ–ß–ï–í–û–ô –ò–ù–°–ê–ô–¢:")
        print(f"üí∞ –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ù–ï –ü–´–¢–ê–ï–¢–°–Ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ")
        print(f"üìä –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–π –∏ —Ä–∏—Å–∫–∞–º–∏")
        print(f"üëÅÔ∏è –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º —É—Å–ª–æ–≤–∏—è–º –±–µ–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        print(f"‚öñÔ∏è –ú–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–∞–∂–µ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–µ!")

if __name__ == "__main__":
    TOKEN = "YOUR_TOKEN"
    
    bot = HonestMoneyManagementBot(TOKEN)
    bot.run_honest_test(start_idx=50, num_trades=60)
